<html>
	<head>
		<meta content="text/html; charset=UTF-8" http-equiv="content-type">
		<style type="text/css">ul.lst-kix_nkel7xkvr8kz-6{list-style-type:none}.lst-kix_x0dkxql5nf1w-3>
			li:before{content:"\0025cf  "}ul.lst-kix_wv4h0p3fi7vp-7{list-style-type:none}ul.lst-kix_nkel7xkvr8kz-7{list-style-type:none}ul.lst-kix_wv4h0p3fi7vp-8{list-style-type:none}ul.lst-kix_nkel7xkvr8kz-4{list-style-type:none}ul.lst-kix_nkel7xkvr8kz-5{list-style-type:none}ul.lst-kix_wv4h0p3fi7vp-3{list-style-type:none}ul.lst-kix_wv4h0p3fi7vp-4{list-style-type:none}ul.lst-kix_nkel7xkvr8kz-8{list-style-type:none}.lst-kix_x0dkxql5nf1w-0>
			li:before{content:"\0025cf  "}.lst-kix_x0dkxql5nf1w-4>
			li:before{content:"\0025cf  "}ul.lst-kix_wv4h0p3fi7vp-5{list-style-type:none}ul.lst-kix_wv4h0p3fi7vp-6{list-style-type:none}.lst-kix_x0dkxql5nf1w-6>
			li:before{content:"\0025cf  "}.lst-kix_x0dkxql5nf1w-7>li:before{content:"\0025cf  "}ul.lst-kix_nkel7xkvr8kz-2{list-style-type:none}.lst-kix_x0dkxql5nf1w-5>
			li:before{content:"\0025cf  "}ul.lst-kix_nkel7xkvr8kz-3{list-style-type:none}ul.lst-kix_nkel7xkvr8kz-0{list-style-type:none}ul.lst-kix_nkel7xkvr8kz-1{list-style-type:none}.lst-kix_phfompnr0x33-0>
			li:before{content:"\0025cf  "}.lst-kix_phfompnr0x33-1>
			li:before{content:"\0025cf  "}ul.lst-kix_wv4h0p3fi7vp-0{list-style-type:none}ul.lst-kix_wv4h0p3fi7vp-1{list-style-type:none}ul.lst-kix_wv4h0p3fi7vp-2{list-style-type:none}.lst-kix_x0dkxql5nf1w-1>
			li:before{content:"\0025cf  "}.lst-kix_x0dkxql5nf1w-2>
			li:before{content:"\0025cf  "}.lst-kix_phfompnr0x33-2>
			li:before{content:"\0025cf  "}.lst-kix_phfompnr0x33-3>
			li:before{content:"\0025cf  "}.lst-kix_phfompnr0x33-5>
			li:before{content:"\0025cf  "}.lst-kix_phfompnr0x33-4>
			li:before{content:"\0025cf  "}.lst-kix_phfompnr0x33-8>
			li:before{content:"\0025cf  "}.lst-kix_phfompnr0x33-7>
			li:before{content:"\0025cf  "}.lst-kix_phfompnr0x33-6>
			li:before{content:"\0025cf  "}.lst-kix_x0dkxql5nf1w-8>
			li:before{content:"\0025cf  "}ul.lst-kix_x0dkxql5nf1w-3{list-style-type:none}ul.lst-kix_x0dkxql5nf1w-2{list-style-type:none}ul.lst-kix_x0dkxql5nf1w-5{list-style-type:none}ul.lst-kix_x0dkxql5nf1w-4{list-style-type:none}ul.lst-kix_x0dkxql5nf1w-7{list-style-type:none}ul.lst-kix_x0dkxql5nf1w-6{list-style-type:none}ul.lst-kix_x0dkxql5nf1w-8{list-style-type:none}.lst-kix_hs26simvhpiu-1>
			li:before{content:"\0025cf  "}.lst-kix_hs26simvhpiu-2>
			li:before{content:"\0025cf  "}.lst-kix_hs26simvhpiu-5>
			li:before{content:"\0025cf  "}.lst-kix_hs26simvhpiu-3>
			li:before{content:"\0025cf  "}.lst-kix_hs26simvhpiu-4>
			li:before{content:"\0025cf  "}.lst-kix_hs26simvhpiu-0>
			li:before{content:"\0025cf  "}.lst-kix_okgvone4eoho-6>
			li:before{content:"\0025cf  "}ul.lst-kix_3ze5ttqi9733-3{list-style-type:none}ul.lst-kix_3ze5ttqi9733-2{list-style-type:none}.lst-kix_okgvone4eoho-8>
			li:before{content:"\0025a0  "}ul.lst-kix_3ze5ttqi9733-1{list-style-type:none}.lst-kix_wv4h0p3fi7vp-8>
			li:before{content:"\0025cf  "}ul.lst-kix_3ze5ttqi9733-0{list-style-type:none}.lst-kix_okgvone4eoho-5>
			li:before{content:"\0025a0  "}.lst-kix_okgvone4eoho-3>
			li:before{content:"\0025cf  "}.lst-kix_2y68kiuv79fy-5>
			li:before{content:"\0025cf  "}.lst-kix_2y68kiuv79fy-7>
			li:before{content:"\0025cf  "}.lst-kix_wv4h0p3fi7vp-0>
			li:before{content:"\0025cf  "}.lst-kix_okgvone4eoho-1>
			li:before{content:"\0025cb  "}.lst-kix_rr2ins807his-2>
			li:before{content:"\0025cf  "}ul.lst-kix_3ze5ttqi9733-8{list-style-type:none}ul.lst-kix_3ze5ttqi9733-7{list-style-type:none}ul.lst-kix_3ze5ttqi9733-6{list-style-type:none}ul.lst-kix_3ze5ttqi9733-5{list-style-type:none}ul.lst-kix_3ze5ttqi9733-4{list-style-type:none}.lst-kix_rr2ins807his-4>
			li:before{content:"\0025cf  "}.lst-kix_2y68kiuv79fy-3>
			li:before{content:"\0025cf  "}.lst-kix_nkel7xkvr8kz-7>
			li:before{content:"\0025cb  "}.lst-kix_rr2ins807his-0>
			li:before{content:"\0025cf  "}.lst-kix_ocm1doslemnk-5>
			li:before{content:"\0025cf  "}.lst-kix_ocm1doslemnk-3>
			li:before{content:"\0025cf  "}.lst-kix_ocm1doslemnk-7>
			li:before{content:"\0025cf  "}.lst-kix_fjdyxgvgb8vt-3>
			li:before{content:"\0025cf  "}.lst-kix_nkel7xkvr8kz-1>
			li:before{content:"\0025cb  "}.lst-kix_nkel7xkvr8kz-5>
			li:before{content:"\0025a0  "}.lst-kix_fjdyxgvgb8vt-5>
			li:before{content:"\0025cf  "}.lst-kix_hs26simvhpiu-6>
			li:before{content:"\0025cf  "}.lst-kix_2y68kiuv79fy-1>
			li:before{content:"\0025cf  "}.lst-kix_hs26simvhpiu-8>
			li:before{content:"\0025cf  "}.lst-kix_nkel7xkvr8kz-3>
			li:before{content:"\0025cf  "}ul.lst-kix_mzmvqym8ub8s-5{list-style-type:none}ul.lst-kix_mzmvqym8ub8s-4{list-style-type:none}ul.lst-kix_mzmvqym8ub8s-7{list-style-type:none}ul.lst-kix_mzmvqym8ub8s-6{list-style-type:none}ul.lst-kix_mzmvqym8ub8s-1{list-style-type:none}ul.lst-kix_mzmvqym8ub8s-0{list-style-type:none}ul.lst-kix_mzmvqym8ub8s-3{list-style-type:none}ul.lst-kix_x0dkxql5nf1w-1{list-style-type:none}ul.lst-kix_mzmvqym8ub8s-2{list-style-type:none}ul.lst-kix_x0dkxql5nf1w-0{list-style-type:none}.lst-kix_ocm1doslemnk-1>
			li:before{content:"\0025cf  "}ul.lst-kix_mzmvqym8ub8s-8{list-style-type:none}.lst-kix_u40p78qn8y9t-6>
			li:before{content:"\0025cf  "}.lst-kix_fjdyxgvgb8vt-1>li:before{content:"\0025cf  "}.lst-kix_3ze5ttqi9733-4>
			li:before{content:"\0025cf  "}.lst-kix_u40p78qn8y9t-8>li:before{content:"\0025cf  "}.lst-kix_3ze5ttqi9733-6>
			li:before{content:"\0025cf  "}.lst-kix_u40p78qn8y9t-0>li:before{content:"\0025cf  "}.lst-kix_3ze5ttqi9733-2>
			
			li:before{content:"\0025cf  "}.lst-kix_wv4h0p3fi7vp-2>li:before{content:"\0025cf  "}.lst-kix_3ze5ttqi9733-0>
			li:before{content:"\0025cf  "}.lst-kix_u40p78qn8y9t-4>li:before{content:"\0025cf  "}.lst-kix_wv4h0p3fi7vp-4>
			li:before{content:"\0025cf  "}.lst-kix_wv4h0p3fi7vp-6>li:before{content:"\0025cf  "}.lst-kix_u40p78qn8y9t-2>
			li:before{content:"\0025cf  "}ul.lst-kix_okgvone4eoho-8{list-style-type:none}ul.lst-kix_okgvone4eoho-7{list-style-type:none}.lst-kix_3ze5ttqi9733-8>li:before{content:"\0025cf  "}ul.lst-kix_okgvone4eoho-2{list-style-type:none}ul.lst-kix_okgvone4eoho-1{list-style-type:none}ul.lst-kix_okgvone4eoho-0{list-style-type:none}ul.lst-kix_okgvone4eoho-6{list-style-type:none}ul.lst-kix_okgvone4eoho-5{list-style-type:none}ul.lst-kix_okgvone4eoho-4{list-style-type:none}ul.lst-kix_okgvone4eoho-3{list-style-type:none}.lst-kix_fjdyxgvgb8vt-7>li:before{content:"\0025cf  "}.lst-kix_fjdyxgvgb8vt-8>
			li:before{content:"\0025cf  "}ul.lst-kix_rr2ins807his-5{list-style-type:none}ul.lst-kix_rr2ins807his-4{list-style-type:none}ul.lst-kix_rr2ins807his-3{list-style-type:none}ul.lst-kix_rr2ins807his-2{list-style-type:none}ul.lst-kix_rr2ins807his-8{list-style-type:none}ul.lst-kix_rr2ins807his-7{list-style-type:none}ul.lst-kix_rr2ins807his-6{list-style-type:none}ul.lst-kix_rr2ins807his-1{list-style-type:none}ul.lst-kix_rr2ins807his-0{list-style-type:none}ul.lst-kix_2y68kiuv79fy-6{list-style-type:none}ul.lst-kix_2y68kiuv79fy-7{list-style-type:none}ul.lst-kix_2y68kiuv79fy-4{list-style-type:none}ul.lst-kix_2y68kiuv79fy-5{list-style-type:none}ul.lst-kix_2y68kiuv79fy-8{list-style-type:none}.lst-kix_rr2ins807his-7>li:before{content:"\0025cf  "}ul.lst-kix_hs26simvhpiu-7{list-style-type:none}ul.lst-kix_hs26simvhpiu-8{list-style-type:none}.lst-kix_mzmvqym8ub8s-1>li:before{content:"\0025cf  "}.lst-kix_mzmvqym8ub8s-3>li:before{content:"\0025cf  "}ul.lst-kix_2y68kiuv79fy-2{list-style-type:none}ul.lst-kix_2y68kiuv79fy-3{list-style-type:none}.lst-kix_rr2ins807his-6>li:before{content:"\0025cf  "}ul.lst-kix_2y68kiuv79fy-0{list-style-type:none}.lst-kix_mzmvqym8ub8s-2>li:before{content:"\0025cf  "}ul.lst-kix_2y68kiuv79fy-1{list-style-type:none}ul.lst-kix_hs26simvhpiu-0{list-style-type:none}ul.lst-kix_hs26simvhpiu-1{list-style-type:none}.lst-kix_mzmvqym8ub8s-5>li:before{content:"\0025cf  "}ul.lst-kix_hs26simvhpiu-2{list-style-type:none}ul.lst-kix_hs26simvhpiu-3{list-style-type:none}ul.lst-kix_hs26simvhpiu-4{list-style-type:none}.lst-kix_rr2ins807his-8>li:before{content:"\0025cf  "}ul.lst-kix_hs26simvhpiu-5{list-style-type:none}.lst-kix_mzmvqym8ub8s-4>li:before{content:"\0025cf  "}ul.lst-kix_hs26simvhpiu-6{list-style-type:none}.lst-kix_mzmvqym8ub8s-6>li:before{content:"\0025cf  "}.lst-kix_mzmvqym8ub8s-7>li:before{content:"\0025cf  "}.lst-kix_mzmvqym8ub8s-8>li:before{content:"\0025cf  "}.lst-kix_okgvone4eoho-7>li:before{content:"\0025cb  "}.lst-kix_wv4h0p3fi7vp-7>li:before{content:"\0025cf  "}.lst-kix_nkel7xkvr8kz-0>li:before{content:"\0025cf  "}.lst-kix_okgvone4eoho-4>li:before{content:"\0025cb  "}.lst-kix_okgvone4eoho-2>li:before{content:"\0025a0  "}ul.lst-kix_ocm1doslemnk-1{list-style-type:none}.lst-kix_2y68kiuv79fy-6>li:before{content:"\0025cf  "}.lst-kix_wv4h0p3fi7vp-1>li:before{content:"\0025cf  "}ul.lst-kix_ocm1doslemnk-0{list-style-type:none}.lst-kix_okgvone4eoho-0>li:before{content:"\0025cf  "}ul.lst-kix_ocm1doslemnk-3{list-style-type:none}ul.lst-kix_ocm1doslemnk-2{list-style-type:none}.lst-kix_rr2ins807his-1>li:before{content:"\0025cf  "}ul.lst-kix_ocm1doslemnk-5{list-style-type:none}ul.lst-kix_ocm1doslemnk-4{list-style-type:none}ul.lst-kix_ocm1doslemnk-7{list-style-type:none}ul.lst-kix_ocm1doslemnk-6{list-style-type:none}ul.lst-kix_ocm1doslemnk-8{list-style-type:none}.lst-kix_rr2ins807his-3>li:before{content:"\0025cf  "}.lst-kix_rr2ins807his-5>li:before{content:"\0025cf  "}.lst-kix_2y68kiuv79fy-8>li:before{content:"\0025cf  "}ul.lst-kix_u40p78qn8y9t-8{list-style-type:none}.lst-kix_mzmvqym8ub8s-0>
			li:before{content:"\0025cf  "}ul.lst-kix_u40p78qn8y9t-6{list-style-type:none}ul.lst-kix_u40p78qn8y9t-7{list-style-type:none}ul.lst-kix_u40p78qn8y9t-4{list-style-type:none}ul.lst-kix_phfompnr0x33-0{list-style-type:none}ul.lst-kix_u40p78qn8y9t-5{list-style-type:none}ul.lst-kix_u40p78qn8y9t-2{list-style-type:none}ul.lst-kix_u40p78qn8y9t-3{list-style-type:none}ul.lst-kix_u40p78qn8y9t-0{list-style-type:none}ul.lst-kix_u40p78qn8y9t-1{list-style-type:none}.lst-kix_nkel7xkvr8kz-8>li:before{content:"\0025a0  "}ul.lst-kix_fjdyxgvgb8vt-2{list-style-type:none}ul.lst-kix_fjdyxgvgb8vt-3{list-style-type:none}ul.lst-kix_fjdyxgvgb8vt-0{list-style-type:none}ul.lst-kix_fjdyxgvgb8vt-1{list-style-type:none}.lst-kix_2y68kiuv79fy-4>li:before{content:"\0025cf  "}.lst-kix_nkel7xkvr8kz-4>li:before{content:"\0025cb  "}ul.lst-kix_fjdyxgvgb8vt-8{list-style-type:none}.lst-kix_nkel7xkvr8kz-2>li:before{content:"\0025a0  "}.lst-kix_nkel7xkvr8kz-6>li:before{content:"\0025cf  "}ul.lst-kix_fjdyxgvgb8vt-6{list-style-type:none}ul.lst-kix_fjdyxgvgb8vt-7{list-style-type:none}.lst-kix_ocm1doslemnk-4>li:before{content:"\0025cf  "}.lst-kix_ocm1doslemnk-8>li:before{content:"\0025cf  "}.lst-kix_fjdyxgvgb8vt-4>li:before{content:"\0025cf  "}ul.lst-kix_fjdyxgvgb8vt-4{list-style-type:none}ul.lst-kix_fjdyxgvgb8vt-5{list-style-type:none}ul.lst-kix_phfompnr0x33-6{list-style-type:none}.lst-kix_2y68kiuv79fy-2>li:before{content:"\0025cf  "}ul.lst-kix_phfompnr0x33-5{list-style-type:none}ul.lst-kix_phfompnr0x33-8{list-style-type:none}ul.lst-kix_phfompnr0x33-7{list-style-type:none}ul.lst-kix_phfompnr0x33-2{list-style-type:none}.lst-kix_2y68kiuv79fy-0>li:before{content:"\0025cf  "}ul.lst-kix_phfompnr0x33-1{list-style-type:none}.lst-kix_hs26simvhpiu-7>li:before{content:"\0025cf  "}.lst-kix_ocm1doslemnk-6>li:before{content:"\0025cf  "}ul.lst-kix_phfompnr0x33-4{list-style-type:none}.lst-kix_fjdyxgvgb8vt-6>li:before{content:"\0025cf  "}ul.lst-kix_phfompnr0x33-3{list-style-type:none}.lst-kix_ocm1doslemnk-0>li:before{content:"\0025cf  "}.lst-kix_fjdyxgvgb8vt-2>li:before{content:"\0025cf  "}.lst-kix_ocm1doslemnk-2>li:before{content:"\0025cf  "}.lst-kix_3ze5ttqi9733-3>li:before{content:"\0025cf  "}.lst-kix_u40p78qn8y9t-7>li:before{content:"\0025cf  "}.lst-kix_fjdyxgvgb8vt-0>li:before{content:"\0025cf  "}.lst-kix_3ze5ttqi9733-5>li:before{content:"\0025cf  "}.lst-kix_3ze5ttqi9733-7>li:before{content:"\0025cf  "}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_u40p78qn8y9t-5>li:before{content:"\0025cf  "}.lst-kix_wv4h0p3fi7vp-3>li:before{content:"\0025cf  "}.lst-kix_3ze5ttqi9733-1>li:before{content:"\0025cf  "}.lst-kix_wv4h0p3fi7vp-5>li:before{content:"\0025cf  "}.lst-kix_u40p78qn8y9t-1>li:before{content:"\0025cf  "}.lst-kix_u40p78qn8y9t-3>li:before{content:"\0025cf  "}ol{margin:0;padding:0}table td,table th{padding:0}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left;height:11pt}.c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c2{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c9{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c3{margin-left:72pt;text-decoration:line-through;padding-left:0pt}.c6{margin-left:36pt;text-decoration:line-through;padding-left:0pt}.c7{margin-left:36pt;padding-left:0pt}.c5{padding:0;margin:0}.c8{margin-left:72pt;padding-left:0pt}.c4{margin-left:108pt;padding-left:0pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}
			</style>
			</head>
			<body class="c9">
				<p class="c2">
					<span class="c0">SHADER BREAKDOWNS </span>
				</p>
				<p class="c1">
					<span class="c0">	
					</span>
				</p>
				<p class="c2">
					<span class="c0">Gears</span>
				</p>
				<p class="c2"><span class="c0">The gears were modelled in fusion 360 as blender&rsquo;s extra meshes did not give the detail I wanted, the f360 sketch imported into blender (through FBX format) where they were positioned, UV unwrapped (top down projection onto second UV channel) and texture painted. In Unreal, each gear is masked by rounding U and V of UVs and multiplying permutations. Each gear is then spun, by vertex animation, around an unreal socket at each gear&rsquo;s centre (placed in blender, passed in by parameter.) Rotation speed is calculated by dividing time into the correct scale for each gear, this allows for time to be scaled by a parameter settable by a designer or in code to speed up or slow down the gear train. Using Unreal&rsquo;s &ldquo;per instance random&rdquo; node I can; add a random value to time, (offsetting the rotation to avoid similar looking trains), or multiply it with the time to give a varying speed. (A similar effect could be achieved in other engines with a random value based on location.)</span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">The intention of this effect was to create a low cost,* accessible way to add interest to walls, doors and other areas that appear frequently. </span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">*Masking via UVs allowed for colour/albedo data to be stored in vertex colours, so no textures were needed and only a single draw call, this effect can be scaled up easily, only increasing in expense after every square number of gears, (2,4,9,16.) But will eventually become more expensive than other methods such as pivot caching or a texture mask. </span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">&mdash;--------------------------------------------------------------------------------------------------</span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">This landscape was generated completely procedurally using mostly GPU compute. There are many CPU implementations, but they often sacrifice performance as the base algorithms are better suited to parallel compute. </span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">The CPU keeps track of where the player is and dispatches a compute shader which generates a visual chunk (but not a collision mesh) when the player is close enough. The CPU also handles normal optimizations like batching draw calls, occlusion and frustum culling. The Compute shader then generates a heightmap* based on several noise functions, this is then used as the height of the vertices of a subdivided square. (This is much more performant than marching squares/cubes and jdoesn&#39;t suffer much as the mesh is a convex plane.) It also uses voronoi noise to create biome areas stored as an ID number which are used in the surface shader.&dagger; This could &nbsp;be used in the noise functions if the terrain is too visually similar, (altering min/max heights, amount of layers in perlin noise, creating sharper hill peaks, etc.) </span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">The compute shader also calculates vertex normals as I needed them for my surface shader. I decided to keep the function simple so it would benefit from the parallelism of GPU compute, after the height calculations I re-sync all the threads so I can use the height values in the buffer, these are then used in several cross product calculations and the values of these are averaged to obtain the normals which are then placed in the buffer. The amount of cross product calculations can be determined at runtime depending on performance, hardware and HLOD, another compute shader can also be added and dispatched later, acting as an async function. </span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">When the player is neighbouring a chunk that does not yet have collision, the buffer data is read from the GPU and a portion of these points are used to create a collision mesh.&Dagger; The decimated mesh is then re-made on the CPU and set to the collider and cached. </span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">* The heightmap is never baked, placed in shared memory, or stored outside of vertices but is a useful analogy. </span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">&dagger; Placed meshes (like trees, grass, ect) can either run a worley noise function to recreate the biome ID or (HLSL) code can be added to store the points where the distance to three or more biome centres is similar/ equal in a different buffer and then create a biome bounding prism or a simple lookup of the closest vertex in the GPU buffer. </span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">&Dagger; These are sampled by using a larger triangle where each edge goes through one vertex (so each quad is 2x2 units, and having half as much detail but not changing any information in the buffer). This can be done by creating a new GPU buffer, (since only a position would be needed per index and fewer indices, this would be pretty small) but I felt it more performant to cache the whole buffer and only use certain indices from it. This does mean the high detail mesh needs to have an odd number of vertices in the X and Y directions, or some code added that handles it. (This could be done by adding a tall thin quad instead of a square one and a small square in the corner.) </span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">&mdash;----------------------------------------------------------------------------------</span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span>I was tasked with animating a random coin flip with the intention to be more interesting and scalable than a standard UI implementation. A random number is generated using squirrel noise* then transformed into a Boolean value using mod2 == 1, I also wrote an overload so it can act more </span><span>like UI if</span><span class="c0">&nbsp;prefered. This boolean is then sent to the shader where a heads or tails texture is sampled on the &quot;top&quot; face (that lands facing upwards) and the other on the bottom face. I chose to sample both textures so if the player looks closely then can see both heads and tails while the coin is flipping and to avoid loading and unloading textures which may cause the texture to change abruptly at a more noticeable time.</span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">&nbsp;The two textures are only changed at the apex of the flip, when the coin is spinning fastest, concealing the change to players. The same principles can be used for other objects like dice, only choosing one face and changing the remaining 3 visible faces so no duplicate faces are shown. </span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">The coin was originally animated on the shader but variances in spawn times made this unpredictable and reduced scalability. I considered a bone animation but decided against it as it would only work for one mesh and updating the mesh would be much more complex. I instead used a code based animation, which can be iterated on quickly or allow for multiple variants to avoid repetition. </span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">*This (white) noise function was introduced to me via a GDC talk (linked below) and had already been implemented in this project via a singleton so felt more appropriate. This also made the code more scalable since a weight can be assigned. </span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">https://youtu.be/LWFzPP8ZbdU</span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">&mdash;-------------------------------------------------------------------------------------------------</span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">I wanted to add to my procedural landscape with weather effects to increase realism and it felt necessary as most modern open world titles have them. This meant that all shader information had to be decided on the GPU, calculated using XYZ coordinates or a global variable controlled by the CPU. </span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">I decided to do water first as this would be the only effect planned that changed the landscape surface shader. The effect is split up into three parts; rain drops hitting a surface, rain drops hitting water (ie a puddle) or a streak running down a surface. I chose to implement these with an &quot;if&quot; statement /switch, as they are all similarly expensive so the wavefront is near parallel, this approach does sacrifice the ability to blend from one effect to the other but is much better for performance. *</span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">The choosing of which effect to use is done by evaluating the vertex normals, (so areas that have a normal that points upwards will only receive the raindrops on surface effect.) </span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">I used triplanar projection to sample the textures for the effect, as this meant I can avoid creating UVs in the compute shader and the effect is always the correct size, even on props. </span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">*As each compute unit renders 4 pixels, it is possible for a single unit to do more than one of the effects. As this is a rare occurrence not every thread group will experience this so this method is still more efficient. There is also a possibility the compiler/engine will make changes to avoid this, masking the line by thread rather than by pixel, (if there is a way to enforce this, I would like to know, more out of interest than efficiency.)</span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">&mdash;--------------------------------------------------------------------------------------------------------</span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">For the global games jam my team decided to create a game with two main states, summarised by &quot;IsDepressed&quot;. To create a depressing theme I designed a complete lighting system to complement Unity&#39;s post process effects. The first state (not depressed) had a &quot;toon&quot; shader, aiming to be less realistic and more bright and cheerful, invoking a happier feeling. This was done by cell shading (colour and brightness) using a simple multiply, round then divide method. This method allowed fast iteration times if the artists weren&#39;t happy with the results as I could change the &quot;precision&quot; of the colour in a single variable, I also added a constant value to the brightness and increased saturation. The second state (aimed to be grungy, dirty, dark and depressing) was achieved by first darkening the lighting then desaturating the colour. I also added a grunge (grey scale) alpha/ texture to increase the roughness in spots and used this as a heightmap to vary the normals of the object, making them look more dirty, it also uses specular reflections to give some of the grunge an oily like surface. </span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">&nbsp;</span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">&mdash;----------------------------------------</span></p><p class="c1"><span class="c0"></span></p><p class="c2"><span class="c0">##########################</span></p><p class="c1"><span class="c0"></span></p><ul class="c5 lst-kix_fjdyxgvgb8vt-0 start"><li class="c2 c7 li-bullet-0"><span class="c0">Landscape</span></li></ul><ul class="c5 lst-kix_hs26simvhpiu-1 start"><li class="c2 c3 li-bullet-0"><span class="c0">UnSuperscript daggers </span></li></ul><ul class="c5 lst-kix_mzmvqym8ub8s-1 start"><li class="c2 c3 li-bullet-0"><span class="c0">collision</span></li><li class="c2 c3 li-bullet-0"><span class="c0">Vert normals </span></li><li class="c2 c8 li-bullet-0"><span class="c0">Surface shader </span></li></ul><ul class="c5 lst-kix_3ze5ttqi9733-1 start"><li class="c2 c4 li-bullet-0"><span class="c0">Texture atlas </span></li></ul><ul class="c5 lst-kix_x0dkxql5nf1w-0 start"><li class="c2 c6 li-bullet-0"><span class="c0">Coin flip</span></li><li class="c2 c7 li-bullet-0"><span class="c0">Water </span></li></ul><ul class="c5 lst-kix_2y68kiuv79fy-0 start"><li class="c2 c8 li-bullet-0"><span class="c0">Triplanar </span></li><li class="c2 c8 li-bullet-0"><span class="c0">anims </span></li></ul><ul class="c5 lst-kix_2y68kiuv79fy-1 start"><li class="c2 c4 li-bullet-0"><span class="c0">drops on surf</span></li><li class="c2 c4 li-bullet-0"><span class="c0">drops on water </span></li><li class="c2 c4 li-bullet-0"><span class="c0">drops down surf</span></li></ul><ul class="c5 lst-kix_wv4h0p3fi7vp-0 start"><li class="c2 c7 li-bullet-0"><span class="c0">Jams</span></li></ul><ul class="c5 lst-kix_rr2ins807his-0 start"><li class="c2 c8 li-bullet-0"><span class="c0">lighting ggj </span></li><li class="c2 c8 li-bullet-0"><span class="c0">shaders ludum </span></li></ul><p class="c1"><span class="c0"></span></p><p class="c1"><span class="c0"></span></p></body></html>